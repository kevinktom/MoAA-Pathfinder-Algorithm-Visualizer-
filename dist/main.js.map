{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/graphNodes.js","webpack:///./src/algorithms/dfs.js","webpack:///./src/algorithms/bfs.js","webpack:///./src/algorithms/dijkstras.js","webpack:///./src/buttons/reset.js","webpack:///./src/buttons/keepwalls.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","GraphNodes","this","determineNeighbors","nodeGenerator","nodes","starting","ending","push","Node","positions","myFlatten","forEach","node","position","neighbor","x","y","neighbors","includes","Array","flattened","el","concat","val","xpos","ypos","weight","depthFirstSearch","graph","draw","visited","Set","stack","interval","setInterval","length","clearInterval","console","log","has","pop","add","breadthFirstSearch","queue","shift","minDistanceNode","distance","from","reduce","minNode","dijkstrasTraversal","source","adjList","neibs","Infinity","unvisited","keys","previous","size","currNode","delete","distanceFromCurrToNeighbor","totalNeighborDistance","dijkstras","start","end","path","reverse","slice","allNodes","pathNodes","reset","currentStart","currentEnd","row","keepwalls","window","addEventListener","wallsEnabled","weightsEnabled","canvas","document","getElementById","ctx","getContext","onmousedown","e","onmousemove","myMove","getMousePosition","posx","posy","graphColumns","graphRows","nodeW","nodeH","boundX","boundY","onmouseup","ondragstart","onclick","ewall","classList","remove","weighter","toggle","WIDTH","HEIGHT","clearRect","w","h","state","fillStyle","beginPath","rect","closePath","fill","canv","event","box","getBoundingClientRect","clientX","left","clientY","top"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","class GraphNodes{\n    constructor(){\n        // this.graph = graph;\n        this.determineNeighbors = this.determineNeighbors.bind(this);\n        this.nodeGenerator = this.nodeGenerator.bind(this);\n        this.nodes = this.nodeGenerator();\n        this.starting = this.nodes[0][0];\n        this.ending = this.nodes[39][24];\n        // this.determineNeighbors();\n        \n    }\n\n    nodeGenerator(){\n        let nodes = [];\n        let boxW = 20;\n        let boxH = 20\n        for(let i = 0; i < 40; i++){\n            nodes.push([]);\n            for(let n = 0; n < 25; n++){\n               nodes[i].push(new Node(10, [i,n], i*(boxW+3), n*(boxH+3)));\n            }\n        }\n        this.determineNeighbors(nodes);\n        return nodes;\n    }\n    // nodeGenerator(){\n    //     let nodes = [];\n    //     const positions = [[1, 0], [-1, 0], [1, 1], [-1, -1], [0, 1], [0, -1], [1, -1], [-1, 1]]\n    //     for(let i = 0; i < 20; i++){\n    //         nodes.push([]);\n    //         for(let n = 0; n < 20; n++){\n    //             let singlenode = new Node(10, [i,n]);\n\n    //            nodes[i].push(new Node(10, [i,n]));\n    //         }\n    //     }\n    //     this.determineNeighbors(nodes);\n    //     return nodes;\n    // }\n\n\n    determineNeighbors(nodes){\n        \n        // const positions = [[1,-1],[-1,1],[-1,-1],[1,1],[0,-1],[-1,0],[0,1],[1,0]]\n        const positions = [[0,-1],[-1,0],[0,1],[1,0]]\n        let flattened = nodes.myFlatten();\n        // debugger\n        flattened.forEach(function(node){\n            // console.log(node);\n            // debugger\n            positions.forEach(function(position){\n                // console.log(position);\n                let neighbor = [node.x + position[0], node.y + position[1]]\n                // console.log(neighbor)\n                // debugger\n                if (((neighbor[0]) >= 0 && (neighbor[0]) < 40 && (neighbor[1]) >= 0 && (neighbor[1]) < 25) && !node.neighbors.includes(nodes[neighbor[0]][neighbor[1]]) ){\n                    node.neighbors.push(nodes[neighbor[0]][neighbor[1]]);\n                }\n\n            })\n        })\n    }\n\n\n}\nArray.prototype.myFlatten = function () {\n    let flattened = [];\n\n    this.forEach((el) => {\n        if (el instanceof Array) {\n            flattened = flattened.concat(el.myFlatten());\n        } else {\n            flattened.push(el);\n        }\n    });\n\n    return flattened;\n};\nclass Node{\n    constructor(val, [x,y], xpos, ypos){\n        this.val = val; // 10 === empty, 50 === wall, 1 === start, 2 === end, //75 === traversed, //300 === weighted with 300\n        this.key = `[${x}][${y}]`;\n        this.x = x;\n        this.y = y;\n        this.neighbors = [];\n        this.xpos = xpos;\n        this.ypos = ypos;\n        this.weight = 1;\n        // this.visited = false;\n    }\n};\n\n\n\nexport default GraphNodes;","// import GraphNodes from \"../graphNodes\";\n\n\nfunction depthFirstSearch(graph, draw) {\n    let visited = new Set();\n    let stack = [graph.starting];\n    let interval = null;\n\n    function addToStack(){\n        let node\n        if (stack.length > 0){\n            node = stack[stack.length - 1];\n        }\n        if (stack[0] === graph.starting){\n            // debugger\n            node = graph.starting\n        }\n        if (node === graph.ending || stack.length === 0){\n            clearInterval(interval);\n            // other logice`\n            // debugger\n            stack = [];//clearing stack once it ends. maybe delete this to show history\n            draw()\n            console.log(\"made it to the end\")\n            return;\n        } else if (visited.has(node)) {\n            return;\n        }\n        node = stack.pop();\n        console.log(stack)\n        console.log(visited)\n        console.log(\"----------------------\")\n        // console.log(graph.ending)\n        visited.add(node);\n        // stack.push(...node.neighbors);\n        node.neighbors.forEach(neighbor => {\n            if (!visited.has(neighbor) && neighbor.val !== 50 && !stack.includes(neighbor)){\n                stack.push(neighbor)\n            }\n        })\n        if (node.val === 10) {\n            node.val = 75;\n        }\n\n        draw();\n    }\n    \n    interval = setInterval(addToStack, 40)\n    console.log(\"donezo\");\n    // debugger\n}\n\nexport default depthFirstSearch;\n\n","// import GraphNodes from \"../graphNodes\";\n\n\nfunction breadthFirstSearch(graph, draw) {\n    let visited = new Set();\n    let queue = [graph.starting];\n    let interval = null;\n\n    function addToQueue() {\n        let node\n        if (queue.length > 0) {\n            node = queue[0];\n        }\n        if (queue[0] === graph.starting) {\n            // debugger\n            node = graph.starting\n        }\n        if (node === graph.ending || queue.length === 0) {\n            // debugger\n            clearInterval(interval);\n            // other logice`\n            // debugger\n            queue = [];//clearing queue once it ends. maybe delete this to show history\n            draw()\n            console.log(\"made it to the end\")\n            return;\n        } else if (visited.has(node)) {\n            return;\n        }\n        node = queue.shift();\n        console.log(queue)\n        console.log(visited)\n        console.log(\"----------------------\")\n        // console.log(graph.ending)\n        visited.add(node);\n        // queue.push(...node.neighbors);\n        node.neighbors.forEach(neighbor => {\n            if (!visited.has(neighbor) && neighbor.val !== 50 && !queue.includes(neighbor)) {\n                queue.push(neighbor)\n            }\n        })\n        // debugger\n        if (node.val === 10) {\n            node.val = 75;\n        }\n\n        draw();\n    }\n\n    interval = setInterval(addToQueue, 40)\n    console.log(\"donezo\");\n    // debugger\n}\n\nexport default breadthFirstSearch;\n\n","// function dijkstras(graph, source, draw) {\n//     let distance = {};\n//     let allNodes = graph.nodes.myFlatten();\n//     allNodes.forEach(node => {\n//         distance[node.key] = Infinity;\n//     })\n//     distance[source.key] = 0; //starting node\n\n\n//     Array.prototype.myFlatten = function () {\n//         let flattened = [];\n\n//         this.forEach((el) => {\n//             if (el instanceof Array) {\n//                 flattened = flattened.concat(el.myFlatten());\n//             } else {\n//                 flattened.push(el);\n//             }\n//         });\n\n//         return flattened;\n//     };\n\n\n//     let unvisited = new Set(allNodes);\n//     let previous = {};\n\n//     while (unvisited.size > 0) {\n//         let currNode = minDistanceNode(unvisited, distance);\n//         unvisited.delete(currNode);\n\n\n//         let graphObject = {};\n//         let currNeighbors = graph.nodes[currNode.x][currNode.y].neighbors //array\n//         currNeighbors.forEach(neighbor => {\n//             graphObject[neighbor.key] = neighbor.weight;\n//         })\n//         for (let neighbor in graphObject) {\n//             // let distanceFromCurrToNeighbor = graph[currNode][neighbor];\n//             let distanceFromCurrToNeighbor = graph.nodes[currNode.x][currNode.y].neighbors.find(finne => {\n//                 if (finne.key === neighbor){\n//                     return finne\n//                 }}).weight;\n//             let totalNeighborDistance = distance[currNode] + distanceFromCurrToNeighbor;\n\n//             if (distance[neighbor] > totalNeighborDistance) {\n//                 distance[neighbor] = totalNeighborDistance;\n//                 previous[neighbor] = currNode;\n//             }\n//         }\n//     }\n\n//     return { distance, previous };\n// }\n\n// function minDistanceNode(nodes, distance) {\n//     return Array.from(nodes).reduce((minNode, node) => (\n//         distance[node] < distance[minNode] ? node : minNode\n//     ));\n// }\n\n\n\nfunction dijkstras(graph, source) {\n\n    Array.prototype.myFlatten = function () {\n    let flattened = [];\n    this.forEach((el) => {\n        if (el instanceof Array) {\n            flattened = flattened.concat(el.myFlatten());\n        } else {\n            flattened.push(el);\n        }\n    });\n    return flattened;\n    };\n\n    let adjList = {}\n    graph.nodes.myFlatten().forEach(node => {\n        let neibs = {}\n        node.neighbors.forEach(neighbor => {\n            if (neighbor.val !== 50){\n                neibs[neighbor.key] = neighbor.weight;\n            }\n        })\n        adjList[node.key] = neibs;\n    })\n\n    let distance = {};\n    for (let node in adjList) {\n        distance[node] = Infinity;\n    }\n    distance[source] = 0;\n\n    let unvisited = new Set(Object.keys(adjList));\n    let previous = {};\n\n\n\n\n    while (unvisited.size > 0) {\n        let currNode = minDistanceNode(unvisited, distance);\n        unvisited.delete(currNode);\n\n        for (let neighbor in adjList[currNode]) {\n            let distanceFromCurrToNeighbor = adjList[currNode][neighbor];\n            let totalNeighborDistance = distance[currNode] + distanceFromCurrToNeighbor;\n\n            if (distance[neighbor] > totalNeighborDistance) {\n                distance[neighbor] = totalNeighborDistance;\n                previous[neighbor] = currNode;\n            }\n        }\n    }\n\n    return { distance, previous };\n}\n\nfunction minDistanceNode(nodes, distance) {\n    return Array.from(nodes).reduce((minNode, node) => (\n        distance[node] < distance[minNode] ? node : minNode\n    ));\n}\n\nfunction dijkstrasTraversal(graph, source, draw){\n    let {distance, previous} = dijkstras(graph, source)\n    let start = graph.starting;\n    let end = graph.ending;\n    let path = [end.key];\n    let interval = null;\n    let node = start;\n    \n    while(path[path.length - 1] !== start.key){\n        path.push(previous[path[path.length - 1]]);\n    }\n    path = path.reverse().slice(1);\n\n    Array.prototype.myFlatten = function () {\n        let flattened = [];\n        this.forEach((el) => {\n            if (el instanceof Array) {\n                flattened = flattened.concat(el.myFlatten());\n            } else {\n                flattened.push(el);\n            }\n        });\n        return flattened;\n    };\n\n    let allNodes = graph.nodes.myFlatten();\n\n    let pathNodes = []\n    path.forEach(key => {\n        allNodes.forEach(node => {\n            if(key === node.key){\n                pathNodes.push(node);\n            }\n        }\n    )})\n    function traversal(){\n        if (node === end || pathNodes.length === 0){\n            clearInterval(interval);\n            draw()\n            console.log(\"end of dijkstras\")\n            return;\n        }\n        node = pathNodes.shift();\n\n        if (node.val === 10) {\n            node.val = 75;\n        }\n\n        draw();\n    }\n    interval = setInterval(traversal, 40)\n    console.log(\"done\");\n}\n\nexport default dijkstrasTraversal;\n\n","function reset(graph, currentStart, currentEnd) {\n    let graphRows = 25;\n    let graphColumns = 40;\n    graph.nodes.forEach(row => {\n        row.forEach(node => {\n            node.val = 10;\n        })\n    })\n    // graph.nodes[0][0].val = 1;\n    // debugger\n    // graph.nodes[0][0] = graph.starting;\n    graph.starting = currentStart;\n    graph.starting.val = 1;\n\n    graph.ending = currentEnd;\n    graph.ending.val = 2;\n    \n    // window.stop();\n\n\n    // graph.nodes[graphColumns - 1][graphRows - 1].val = 2;\n\n}\n\nexport default reset;","function keepwalls(graph, currentStart, currentEnd) {\n    let graphRows = 25;\n    let graphColumns = 40;\n    graph.nodes.forEach(row => {\n        row.forEach(node => {\n            if (node.val !== 50 && node.val !==300)\n            node.val = 10;\n        })\n    })\n    // graph.nodes[0][0].val = 1;\n    // graph.nodes[graphColumns - 1][graphRows - 1].val = 2;\n    graph.starting = currentStart;\n    graph.starting.val = 1;\n\n    graph.ending = currentEnd;\n    graph.ending.val = 2;\n    // graph.nodes[graphColumns - 1][graphRows - 1].val = 2;\n}\n\nexport default keepwalls;","import './styles/index.scss';\nimport GraphNodes from './graphNodes.js';\nimport depthFirstSearch from './algorithms/dfs';\nimport breadthFirstSearch from './algorithms/bfs';\nimport dijkstrasTraversal from './algorithms/dijkstras';\n\nimport reset from './buttons/reset';\nimport keepwalls from './buttons/keepwalls';\n// import enableWalls from './buttons/enableWalls';\n\nwindow.addEventListener('DOMContentLoaded', () => {\n    let wallsEnabled = false;\n    let weightsEnabled = false;\n    let canvas = document.getElementById(\"app\");\n    let ctx = canvas.getContext(\"2d\");\n    init();\n    canvas.onmousedown = mouseDown;\n    canvas.onmouseup = mouseUp;\n    canvas.ondragstart = function(){\n        return false;\n    }\n    let dfs = document.getElementById(\"dfs\");\n    dfs.onclick = () => {\n        depthFirstSearch(graph, draw);\n    }\n\n    let bfs = document.getElementById(\"bfs\");\n    bfs.onclick = () => {\n        breadthFirstSearch(graph, draw);\n    }\n    let dijkstras = document.getElementById(\"dijkstras\");\n    dijkstras.onclick = () => {\n        dijkstrasTraversal(graph, graph.starting.key, draw);\n    }\n\n    let resetbutton = document.getElementById(\"reset\");\n    resetbutton.onclick = () => {\n        reset(graph, currentStart, currentEnd);\n        // currentStart = graph.nodes[0][0];\n        // currentEnd = graph.nodes[39][24];\n        wallsEnabled = false;\n        ewall.classList.remove(\"clicked\");\n        weightsEnabled = false;\n        weighter.classList.remove(\"clicked\");\n    }\n\n    let wallsremain = document.getElementById(\"keepwalls\");\n    wallsremain.onclick = () => {\n        keepwalls(graph, currentStart, currentEnd);\n        // currentStart = graph.nodes[0][0];\n        // currentEnd = graph.nodes[39][24];\n        wallsEnabled = false;\n        ewall.classList.remove(\"clicked\");\n        weightsEnabled = false;\n        weighter.classList.remove(\"clicked\");\n    }\n\n\n    let ewall = document.getElementById(\"addwalls\");\n    ewall.onclick = () => {\n        // enableWalls(wallsEnabled);\n        wallsEnabled = !wallsEnabled;\n        weightsEnabled = false;\n        weighter.classList.remove(\"clicked\");\n        ewall.classList.toggle(\"clicked\");\n    }\n\n    let weighter = document.getElementById(\"addweights\");\n    weighter.onclick = () => {\n        weightsEnabled = !weightsEnabled;\n        wallsEnabled = false;\n        ewall.classList.remove(\"clicked\");\n        weighter.classList.toggle(\"clicked\");\n    }\n\n// });\n\n\n// let canvas\n// let ctx\n// let wallsEnabled = false;\n\n\n\nlet WIDTH = 1200;\nlet HEIGHT = 800;\n\nlet nodeW = 20;\nlet nodeH = 20;\n\nlet graphRows = 25;\nlet graphColumns = 40;\n\nlet boundX = 0;\nlet boundY = 0;\n\n\n\nlet graph = new GraphNodes();\n// debugger\n\ngraph.nodes[0][0].val = 1;\ngraph.nodes[graphColumns-1][graphRows-1].val = 2;\n\nfunction rect(x,y,w,h, state){\n    if (state === 1){ //start\n        ctx.fillStyle = \"#75E170\";\n    }\n    else if (state === 2){ //end\n        ctx.fillStyle = \"#FC7272\";\n    }\n    else if (state === 10){ //unvisited\n        ctx.fillStyle = \"#EEEEDD\";\n    }\n    else if (state === 50){ //walls\n        ctx.fillStyle = '#1212A5';\n    }\n    else if (state === 75){ //visited\n        ctx.fillStyle = '#50FFF7';\n    }\n    else if (state === 300){\n        ctx.fillStyle = '#FFFF00'\n    }\n\n    ctx.beginPath();\n    ctx.rect(x, y, w, h);\n    ctx.closePath();\n    ctx.fill();\n}\n\nfunction draw(){\n    // ctx.fillStyle = \"#black\";\n    // rect(10,10,10,10);\n    clear();\n\n    for (let c = 0; c < graphColumns; c++) {\n        for (let r = 0; r < graphRows; r++) {\n            rect(graph.nodes[c][r].xpos, graph.nodes[c][r].ypos, nodeW, nodeH, graph.nodes[c][r].val);\n        }\n    }\n}\n\nfunction clear(){\n    // debugger\n    ctx.clearRect(0,0,WIDTH, HEIGHT)\n}\n\nfunction init(){\n    canvas = document.getElementById(\"app\");\n    ctx = canvas.getContext(\"2d\");\n\n    return setInterval(draw,10);\n}\n\nlet currentStart = graph.starting;\nlet currentEnd = graph.ending;\n\nfunction mouseDown(e){\n    canvas.onmousemove = myMove;\n    // canvas.ondragstart = myMove;\n    // debugger\n\n    let position = getMousePosition(canvas, e);// next three lines possibly unecessary\n    let posx = position.x;\n    let posy = position.y;\n\n\n\n    for (let c = 0; c < graphColumns; c++){\n        for (let r=0; r < graphRows; r++){\n            if ((c*(nodeW+3) < posx) \n            && (posx < c*(nodeW+3)+nodeW) \n            && (r*(nodeH+3) < posy) \n            && (posy < r*(nodeH+3)+nodeH)) {\n\n                if (graph.nodes[c][r].val === 10 && wallsEnabled === true){ //if empty make it a wall ()\n                    graph.nodes[c][r].val = 50;\n                    boundX = c;\n                    boundY = r;\n                }\n                else if (graph.nodes[c][r].val === 50 && wallsEnabled === true){\n                    graph.nodes[c][r].val = 10;\n                    boundX = c;\n                    boundY = r;\n                }\n                else if (graph.nodes[c][r].val === 10 && weightsEnabled === true){\n                    graph.nodes[c][r].val = 300;\n                    graph.nodes[c][r].weight = 4;\n                    boundX = c;\n                    boundY = r;\n                }\n                else if (graph.nodes[c][r].val === 300 && weightsEnabled === true){\n                    graph.nodes[c][r].val = 10;\n                    graph.nodes[c][r].weight = 1;\n                    boundX = c;\n                    boundY = r;\n                }\n\n\n                else if (wallsEnabled === false && weightsEnabled === false && graph.nodes[c][r].val !== 2 && graph.nodes[c][r].val === 1\n                    && ((currentStart.x * (nodeW + 3) < posx)\n                    && (posx < currentStart.x * (nodeW + 3) + nodeW)\n                    && (posy > currentStart.y * (nodeH + 3))\n                    && (posy < currentStart.y * (nodeH + 3) + nodeH))\n                    ) {\n                    // debugger\n                    currentStart.val = 10;\n                    graph.nodes[c][r].val = 1;\n                    currentStart = graph.nodes[c][r];\n                    graph.starting = currentStart;\n                    // debugger\n                    boundX = c;\n                    boundY = r;\n                }\n                else if (wallsEnabled === false && weightsEnabled === false && graph.nodes[c][r].val !== 1 && graph.nodes[c][r].val === 2\n                    && ((currentEnd.x * (nodeW + 3) < posx)\n                    && (posx < currentEnd.x * (nodeW + 3) + nodeW)\n                    && (posy > currentEnd.y * (nodeH + 3))\n                    && (posy < currentEnd.y * (nodeH + 3) + nodeH))\n                    ) {\n                    // debugger\n                    currentEnd.val = 10;\n                    graph.nodes[c][r].val = 2;\n                    currentEnd = graph.nodes[c][r];\n                    graph.ending = currentEnd;\n                    // debugger\n                    boundX = c;\n                    boundY = r;\n                }\n                \n                \n            }\n        }\n    }\n}\n\nfunction myMove(e){\n    let position = getMousePosition(canvas, e);// next three lines possibly unecessary\n    let posx = position.x;\n    let posy = position.y;\n    // let currentStart = graph.starting;\n\n\n    for (let c = 0; c < graphColumns; c++) {\n        for (let r = 0; r < graphRows; r++) {\n            if ((c * (nodeW + 3) < posx)\n                && (posx < c * (nodeW + 3) + nodeW)\n                && (r * (nodeH + 3) < posy)\n                && (posy < r * (nodeH + 3) + nodeH)) {\n\n                if (graph.nodes[c][r].val === 10 && (c !== boundX || r !== boundY) && wallsEnabled === true) { //if empty make it a wall ()\n                    graph.nodes[c][r].val = 50;\n                    boundX = c;\n                    boundY = r;\n                }\n                else if (graph.nodes[c][r].val === 50 && (c !== boundX || r !== boundY) && wallsEnabled === true) {\n                    graph.nodes[c][r].val = 10;\n                    boundX = c;\n                    boundY = r;\n                }\n                else if (graph.nodes[c][r].val === 10 && (c !== boundX || r !== boundY) && weightsEnabled === true) {\n                    graph.nodes[c][r].val = 300;\n                    graph.nodes[c][r].weight = 4;\n                    boundX = c;\n                    boundY = r;\n                }\n                else if (graph.nodes[c][r].val === 300 && (c !== boundX || r !== boundY) && weightsEnabled === true) {\n                    graph.nodes[c][r].val = 10;\n                    graph.nodes[c][r].weight = 1;\n                    boundX = c;\n                    boundY = r;\n                }\n                // else if (wallsEnabled === false){\n                //     currentStart.val = 10;\n                //     graph.nodes[c][r].val = 1;\n                //     currentStart = graph.nodes[c][r];\n                //     // debugger\n                //     boundX = c;\n                //     boundY = r;\n                // }\n\n                else if (wallsEnabled === false && weightsEnabled === false && graph.nodes[c][r].val !== 2 \n                    && ((currentStart.x * (nodeW + 1) < posx)\n                    && (posx < currentStart.x * (nodeW + 3) + 3* nodeW)\n                    && (posy > currentStart.y * (nodeH + 1))\n                    && (posy < currentStart.y * (nodeH + 3) + 3* nodeH)\n                    && (c !== boundX || r !== boundY) //possibly affect dragging quality of start\n                    )) {\n                    // debugger\n                    currentStart.val = 10;\n                    graph.nodes[c][r].val = 1;\n                    currentStart = graph.nodes[c][r];\n                    graph.starting = currentStart;\n                    // debugger\n                    boundX = c;\n                    boundY = r;\n                }\n                else if (wallsEnabled === false && weightsEnabled === false && graph.nodes[c][r].val !== 1 \n                    && ((currentEnd.x * (nodeW + 1) < posx)\n                    && (posx < currentEnd.x * (nodeW + 3) + 3* nodeW)\n                    && (posy > currentEnd.y * (nodeH + 1))\n                    && (posy < currentEnd.y * (nodeH + 3) + 3* nodeH)\n                    && (c !== boundX || r !== boundY) //possibly affect dragging quality of end\n                    )) {\n                    // debugger\n                    currentEnd.val = 10;\n                    graph.nodes[c][r].val = 2;\n                    currentEnd = graph.nodes[c][r];\n                    graph.ending = currentEnd;\n                    // debugger\n                    boundX = c;\n                    boundY = r;\n                }\n            }\n        }\n    }\n}\n\nfunction mouseUp(){\n    canvas.onmousemove = null;\n}\n\nfunction getMousePosition(canv, event){\n    let box = canv.getBoundingClientRect();\n    return{\n        x: event.clientX - box.left,\n        y: event.clientY - box.top\n    };\n}\n});\n\n"],"sourceRoot":""}